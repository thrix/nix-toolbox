{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nix Toolbox - Fedora Toolbox \ud83c\udf36\ufe0f with Nix and Home Manager","text":"<p>This project builds on top of Fedora Toolbox container image and adds Nix package manager and optionally Home Manager for the following benefits:</p> <ul> <li>The easiest way to get Nix and Home Manager working on Fedora and Fedora Atomic Desktops</li> <li>Simple access to 100k+ packages in the Nix Packages collection</li> <li>Support for Nix-based development environment used by various open-source projects</li> <li>Use Home Manager to manage your home environment as code, and partially also system environment</li> <li>Works well with Toolbx or Distrobox</li> </ul> <p>Follow Getting Started to try out Nix Toolbox.</p> <p>The project was introduced at DevConf.CZ 2025 conference, you can find the introduction talk here.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>This page describes the technical architecture of nix-toolbox and how it integrates Nix and Home Manager into a Fedora Toolbox container.</p>"},{"location":"architecture/#overview","title":"Overview","text":"<p>Nix-toolbox is built on top of Fedora Toolbox, extending it with the Nix package manager and optional Home Manager support. The architecture follows a layered approach:</p> <ol> <li>Base Layer: Fedora Toolbox container image</li> <li>Enhancement Layer: Nix package manager installation and configuration</li> <li>Management Layer: Home Manager for declarative environment management</li> <li>Integration Layer: Profile script for seamless user experience</li> </ol>"},{"location":"architecture/#container-image-structure","title":"Container Image Structure","text":"<p>The nix-toolbox container is built using a simple <code>Containerfile</code> that:</p> <ul> <li>Extends the official <code>registry.fedoraproject.org/fedora-toolbox</code> image</li> <li>Installs gum for enhanced CLI user experience</li> <li>Copies the <code>nix.sh</code> profile script to <code>/etc/profile.d/</code></li> </ul> <pre><code>FROM registry.fedoraproject.org/fedora-toolbox:$FEDORA_VERSION\nRUN dnf -y install gum\nCOPY nix.sh /etc/profile.d/nix.sh\n</code></pre>"},{"location":"architecture/#the-nixsh-profile-script","title":"The nix.sh Profile Script","text":"<p>The core of nix-toolbox's functionality is the <code>nix.sh</code> profile script located at <code>/etc/profile.d/nix.sh</code>. This script is automatically executed when users start a shell session in the container and handles:</p>"},{"location":"architecture/#environment-setup","title":"Environment Setup","text":"<ul> <li>XDG Compliance: Ensures <code>XDG_DATA_HOME</code> and <code>XDG_CONFIG_HOME</code> are properly set</li> <li>Home Directory: Resolves symlinks in <code>$HOME</code> since Nix requires a real path</li> <li>Configuration Directory: Creates <code>~/.config/nix-toolbox/</code> for storing nix-toolbox specific settings</li> </ul>"},{"location":"architecture/#nix-installation-and-management","title":"Nix Installation and Management","text":"<p>The script implements a sophisticated Nix installation strategy:</p> <ol> <li>Detection: Checks if <code>/nix</code> directory exists</li> <li>First-time Setup: If no Nix store is found:</li> <li>Enables <code>nix-command</code> and <code>flakes</code> in <code>/etc/nix/nix.conf</code></li> <li>Creates a bind mount from <code>$XDG_DATA_HOME/nix</code> to <code>/nix</code></li> <li>Installs Nix in single-user mode via the official installer</li> <li>Runtime Mount: Ensures <code>/nix</code> is properly mounted on each container start</li> <li>Environment Sourcing: Sources the Nix environment from <code>~/.nix-profile/etc/profile.d/nix.sh</code></li> </ol>"},{"location":"architecture/#storage-strategy","title":"Storage Strategy","text":"<p>Nix-toolbox uses a bind mount approach for persistent storage:</p> <ul> <li>Host Storage: Nix store is persisted in <code>$XDG_DATA_HOME/nix</code> on the host</li> <li>Container Mount: Bind-mounted to <code>/nix</code> inside the container</li> <li>Benefits:</li> <li>Survives container recreation</li> <li>Shares storage between multiple nix-toolbox containers</li> <li>Keeps the Nix store outside the container filesystem</li> </ul>"},{"location":"architecture/#home-manager-integration","title":"Home Manager Integration","text":"<p>The script provides optional Home Manager installation with user choice:</p> <ol> <li>Detection: Checks if Home Manager is already installed</li> <li>Existing Configuration: If <code>~/.config/home-manager</code> exists, uses it directly</li> <li>Template Selection: Offers users a choice between:</li> <li>nix-toolbox template (future feature)</li> <li>Empty configuration initialized by Home Manager</li> <li>Installation: Uses <code>nix run home-manager/master</code> for installation</li> <li>Skip Option: Allows users to skip Home Manager entirely</li> </ol>"},{"location":"architecture/#user-experience-features","title":"User Experience Features","text":"<ul> <li>Interactive Prompts: Uses <code>gum</code> for enhanced CLI interactions</li> <li>Progress Indication: Shows spinners during long-running operations</li> <li>Logging: Provides clear status messages using <code>gum log</code></li> <li>Error Handling: Validates dependencies and provides meaningful error messages</li> <li>History Cleanup: Clears shell history to avoid polluting user sessions</li> </ul>"},{"location":"architecture/#configuration-management","title":"Configuration Management","text":"<p>Nix-toolbox maintains several configuration files in <code>~/.config/nix-toolbox/</code>:</p> <ul> <li><code>home-manager.skipped</code>: Marker file when user skips Home Manager</li> <li><code>home-manager.setup</code>: Marker file for automated Home Manager setup</li> <li><code>home-manager.template</code>: Stores user's template choice</li> </ul>"},{"location":"architecture/#integration-with-fedora-atomic","title":"Integration with Fedora Atomic","text":"<p>The architecture is specifically designed for Fedora Atomic Desktops:</p> <ul> <li>Immutable Host: Respects the immutable nature of the host filesystem</li> <li>User Space: All modifications happen in user space or containers</li> <li>XDG Standards: Follows XDG Base Directory specifications</li> <li>Toolbox Compatibility: Maintains full compatibility with existing toolbox workflows</li> </ul>"},{"location":"architecture/#security-considerations","title":"Security Considerations","text":"<ul> <li>Single-user Mode: Nix is installed in single-user mode, avoiding multi-user daemon complexity</li> <li>Sudo Requirements: Minimal sudo usage inside the container only for:</li> <li>Creating <code>/etc/nix/nix.conf</code></li> <li>Setting up the <code>/nix</code> bind mount</li> <li>User Permissions: All package installations and Home Manager operations run as the user</li> </ul> <p>This architecture provides a seamless integration of Nix ecosystem tools while maintaining the simplicity and isolation benefits of Fedora Toolbox.</p>"},{"location":"examples/","title":"A List of Example Configurations","text":"<p>This is a list of example configuration of users using <code>nix-toolbox</code>.</p> <ul> <li>Configuration of the creator of this project - https://github.com/thrix/nix-config.</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Starting with Nix Toolbox is really simple. Make sure you are running a system with Toolbx or Distrobox installed.</p> <p>Create Nix Toolbox container</p> ToolboxDistrobox <pre><code>toolbox create --image ghcr.io/thrix/nix-toolbox:42\n</code></pre> <pre><code>distrobox create --image ghcr.io/thrix/nix-toolbox:42\n</code></pre> <p>This will create the <code>nix-toolbox</code> the container.</p> <p>The Nix and Home Manager setup is then performed when you first time enter the container:</p> ToolboxDistrobox <pre><code>toolbox enter nix-toolbox-42\n</code></pre> <pre><code>distrobox enter nix-toolbox-42\n</code></pre> <p>Note</p> <p>Do not be afraid, the next start of the container will be as quick as with Fedora Toolbox.</p> <p>Note</p> <p>Depending on your setup, the first time setup can take a long time, especially if you already have some Home Manager configuration available.</p> <p>The Home Manager configuration is optional, and you can skip it to have only the <code>nix</code> command.</p> <p>After the Nix is installed, you can opt-in to install Home Manager.</p> <p>Info</p> <p>Currently, the project provides an empty Home Manager configuration. Please take a look at the Examples to get most out of Nix Toolbox. We are planning to throw out a more reasonable template later for easier onboarding.</p> <p>The home manager configuration is available at <code>~/.config/home-manager/home.nix</code>. When changing the Home Manager configuration it is a good practice to put it under revision control to keep history of your changes to be able to easily replicate the setup on another computer.</p>"},{"location":"uninstalling/","title":"Uninstalling","text":"<p>To remove Nix Toolbox from your system, delete the toolbox container:</p> ToolboxDistrobox <pre><code>toolbox rm -f nix-toolbox-42\n</code></pre> <pre><code>distrobox rm -f nix-toolbox-42\n</code></pre> <p>To remove the nix store and the links to Nix programs:</p> <pre><code>sudo rm -rf ~/.local/share/nix/ ~/.nix-profile ~/.config/nix-toolbox\n</code></pre> <p>To remove also the Home Manager configuration:</p> <pre><code>rm -rf ~/.config/home-manager\n</code></pre>"}]}